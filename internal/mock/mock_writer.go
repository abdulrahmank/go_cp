// Code generated by MockGen. DO NOT EDIT.
// Source: ./writer/write.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCpWriter is a mock of CpWriter interface
type MockCpWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCpWriterMockRecorder
}

// MockCpWriterMockRecorder is the mock recorder for MockCpWriter
type MockCpWriterMockRecorder struct {
	mock *MockCpWriter
}

// NewMockCpWriter creates a new mock instance
func NewMockCpWriter(ctrl *gomock.Controller) *MockCpWriter {
	mock := &MockCpWriter{ctrl: ctrl}
	mock.recorder = &MockCpWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCpWriter) EXPECT() *MockCpWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockCpWriter) Write(content []byte, fileName string) (int, error) {
	ret := m.ctrl.Call(m, "Write", content, fileName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockCpWriterMockRecorder) Write(content, fileName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCpWriter)(nil).Write), content, fileName)
}
